'
' File: ReportBackup.rss
' 
' Description:
' This is a script for Microsoft SQL Report Server rs.exe that can be used to back up all report layouts that are in a specific Report Server folder.
'
' To run the script, you must specify the global variables parentPath and exportTo as an argument to rs.exe by using the -v switch.
'
' Example usage:
'
'	rs -i ReportBackup.rss -s http://localhost:8080/ReportServer -v parentPath="/" -v exportTo=".\Export"
'
'	parentPath		Set this to the parent folder in SSRS that you wish to back up. For example, setting this to "/" will back up all reports in all sub folders.
'	exportTo		Set this to the directory on disk where you want to back up the report .RDL files, without any trailing slash.
'				The structure on disk will match the structure in ssrsPath.
'
Public Debug As Boolean = True

Public Sub Main()
    Dim items() As CatalogItem
    Dim exportCount As Integer = 0
    Dim backupPath As String
    
    Try
	WriteLogEntry("ReportBackup started")
	
	backupPath = GetBackupDirectoryByDateStamp(exportTo)
	
        Console.WriteLine(String.Format("Exporting reports from '{0}' into '{1}'....", parentPath, backupPath))
        Console.WriteLine("")
        
        items = rs.ListChildren(parentPath, True)
        Dim item As CataLogItem
        For Each item In items
            If item.Type <> 2 Then Continue For
                
            Dim definition As [Byte]() = Nothing
            Dim item_path As String = Nothing
            Dim item_export_path As String = Nothing
            
            Try
                Console.Write(item.Path + "... ")
                
                item_path = item.Path
                definition = rs.GetReportDefinition(item_path)
                item_export_path = item_path.Replace("/", "\")
                item_export_path = String.Format("{0}{1}.rdl", backupPath, item_export_path)
                
                BackupReport(item_path, definition, item_export_path)
                
                Console.WriteLine("Exported.")
                WriteLogEntry(String.Format("Report '{0}' exported to '{1}'.", item_path, item_export_path))
                
                exportCount += 1
            Catch er As Exception
                Console.WriteLine("Export failed!")
                Console.WriteLine(String.Format(">> Error: {0}", er.Message))
                WriteLogEntry(String.Format("Failed to export report '{0}'.", item_path), er)
            End Try
        Next item
	
	WriteLogEntry(String.Format("ReportBackup finished. {0} reports exported", exportCount))
    Catch e As Exception
        Console.WriteLine(e.Message)
        WriteLogEntry("Reports export failed.", e)
    End Try
End Sub

Sub BackupReport(ByVal ReportPath As String, ByVal Definition As [Byte](), ByVal BackupPath As String)
    Try
	If File.Exists(BackupPath) Then 
		File.Delete(BackupPath)
	End If
    
	If Not Directory.Exists(Path.GetDirectoryName(BackupPath)) Then 
		Directory.CreateDirectory(Path.GetDirectoryName(BackupPath))
	End If
    
        SaveBinary(BackupPath, Definition)
    Catch e As Exception
        Console.WriteLine(String.Format("Failed to write report '{0}' to disk.", ReportPath))
        Console.WriteLine(String.Format(">> Error: {0}", e.Message))
        WriteLogEntry(String.Format("Failed to write report '{0}' to disk.", ReportPath), e) 
    End Try
End Sub

Sub SaveBinary(ByVal FileName As String, ByVal Data As [Byte]())
    Dim oDoc As New XmlDocument()
    
    Using oStream As MemoryStream = New MemoryStream(Data)
        oDoc.Load(oStream)
        oDoc.Save(FileName)
    End Using
End Sub

Sub WriteLogEntry(ByVal Message As String)
    Dim logfile As String = "ReportBackup.log"

    Using oWriter As StreamWriter = New StreamWriter(logfile, True)
        oWriter.WriteLine(String.Format("{0} - {1}", DateTime.Now, Message))
    End Using
End Sub

Sub WriteLogEntry(ByVal Message As String, ByVal Ex As Exception)
    Dim logfile As String = "Error.log"

    Using oWriter As StreamWriter = New StreamWriter(logfile, True)
        oWriter.WriteLine(String.Format("{0} - {1} [Err: {2}]", DateTime.Now, Message, Ex.Message))
    End Using
End Sub

Sub WriteDebugEntry(ByVal Message As String)
    Dim logfile As String = "Debug.log"

    Using oWriter As StreamWriter = New StreamWriter(logfile, True)
        oWriter.WriteLine(String.Format("{0} - {1}", DateTime.Now, Message))
    End Using
End Sub

Function GetBackupDirectoryByDateStamp(ByVal path As String) As String
    GetBackupDirectoryByDateStamp = path + "\\" + DateTime.Now.ToString("yyyy-MM-dd_hh-mm-ss")
    Exit Function 
End Function
